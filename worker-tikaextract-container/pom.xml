<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.mcgreevy</groupId>
        <artifactId>worker-tikaextract-aggregator</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>
    
    <artifactId>worker-tikaextract-container</artifactId>
    <packaging>pom</packaging>

    <!-- Properties for the worker. -->
    <properties>
        <!-- A property is created by the windows or linux nightly tests profiles to allow the nightly tests to pick
        up binary content files from a remote location e.g. test.binary.content.basedir=/mnt/test-sources/ -->
        <test.binary.content.location>${project.basedir}/test-data/input</test.binary.content.location>
        <!-- allows users to run a single test case or group of test cases under the main test input directory. e.g. "CAF_1027" -->
        <test.single.testcase.name></test.single.testcase.name>
        <maven.install.skip>true</maven.install.skip>
        <maven.deploy.skip>false</maven.deploy.skip>
        <docker.maven.version>0.13.6</docker.maven.version>
        <worker-tikaextract.container.name>anthonymcgreevy/prereleases:worker-tikaextract-${project.version}</worker-tikaextract.container.name>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <test.data>${project.basedir}/test-data/input</test.data>
        <maven.failsafe.version>2.19</maven.failsafe.version>
        <maven.compiler.version>3.3</maven.compiler.version>
        <fabric8.docker.maven.version>0.20.1</fabric8.docker.maven.version>
        <skipTests>false</skipTests>
        <test.case.generation>false</test.case.generation>
        <!-- allows users to run a single test case or group of test cases under the main test input directory. e.g. "CAF_1027" -->
        <test.single.testcase.name></test.single.testcase.name>
        <test.case.timeout.ms>60000</test.case.timeout.ms>
    </properties>

    <!-- CAF standard worker container dependency, worker-tikaextract dependency. -->
    <dependencies>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>standard-worker-container</artifactId>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>jbig2-imageio</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.logging</groupId>
            <artifactId>caf-logging-logback</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.mcgreevy</groupId>
            <artifactId>worker-tikaextract</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.cafdataprocessing</groupId>
            <artifactId>worker-document</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.mcgreevy</groupId>
            <artifactId>worker-tikaextract-testing</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-testing-util</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Unpack the base worker configuration files -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>process-config-files</id>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.github.workerframework</groupId>
                                    <artifactId>worker-default-configs</artifactId>
                                    <outputDirectory>${project.build.directory}/config-files</outputDirectory>
                                    <excludes>META-INF/**</excludes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Process the local configuration files -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <executions>
                    <execution>
                        <id>process-config-files</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/config-files</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/config</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin for compiling the test source files. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <executions>
                    <execution>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin for running integration tests in the integration-test phase -->
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven.failsafe.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <docker.host.address>${docker.host.address}</docker.host.address>
                        <worker.adminport>${worker.adminport}</worker.adminport>
                        <rabbitmq.node.port>${rabbitmq.node.port}</rabbitmq.node.port>
                        <rabbitmq.ctrl.port>${rabbitmq.ctrl.port}</rabbitmq.ctrl.port>
                        <input.folder>${test.data}/${test.single.testcase.name}</input.folder>
                        <expected.folder>${test.data}</expected.folder>
                        <datastore.enabled>true</datastore.enabled>
                        <timeout.ms>${test.case.timeout.ms}</timeout.ms>
                        <test.sourcefile.base.folder>${test.binary.content.location}</test.sourcefile.base.folder>
                        <testCaseGeneration>${test.case.generation}</testCaseGeneration>
                    </systemPropertyVariables>
                    <!-- DEBUGGING
                      <debugForkedProcess>true</debugForkedProcess>
                    -->
                    <environmentVariables>
                        <CAF_APPNAME>caf/worker</CAF_APPNAME>
                        <CAF_CONFIG_PATH>${project.build.directory}/config-files</CAF_CONFIG_PATH>
                        <CAF_CONFIG_DECODER>JavascriptDecoder</CAF_CONFIG_DECODER>
                        <CAF_CONFIG_ENABLE_SUBSTITUTOR>false</CAF_CONFIG_ENABLE_SUBSTITUTOR>
                        <CAF_WORKER_DATASTORE_PATH>datastore</CAF_WORKER_DATASTORE_PATH>
                        <CAF_RABBITMQ_PREFETCH_BUFFER>1000</CAF_RABBITMQ_PREFETCH_BUFFER>
                        <CAF_WORKER_RETRY_LIMIT>2</CAF_WORKER_RETRY_LIMIT>
                        <CAF_WORKER_MAX_BATCH_TIME>5000</CAF_WORKER_MAX_BATCH_TIME>
                        <CAF_WORKER_DATASTORE_PATH>${caf.integrationtests.fs.path}</CAF_WORKER_DATASTORE_PATH>
                    </environmentVariables>
                </configuration>
            </plugin>
            <!--
                Builds the Docker image for the worker-tikaextract, starts RabbitMQ and assembles the configuration files
                for running the integration tests.
            -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${fabric8.docker.maven.version}</version>
                <executions>
                    <!-- Build the container in compile phase. -->
                    <execution>
                        <id>build-docker-container</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <!-- Start the containers in pre-integration-test phase. -->
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <!-- Stop the containers in post-integration-test phase. -->
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                    <!-- Push the docker image for the worker to the registry in deploy phase -->
                    <execution>
                        <id>upload-docker-container</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <filter>worker-tikaextract</filter>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <watchInterval>500</watchInterval>
                    <logDate>default</logDate>
                    <!--<autoPull>always</autoPull>-->
                    <verbose>true</verbose>
                    <images>
                        <!-- WebDav -->
                        <image>
                            <alias>webdav</alias>
                            <name>cloudesire/webdav</name>
                            <run>
                                <volumes>
                                    <bind>
                                        <volume>/srv/common/webdav</volume>
                                    </bind>
                                </volumes>
                                <ports>
                                    <port>${webdav.apache.port}:8080</port>
                                </ports>
                                <env>
                                    <APACHE_PORT>8080</APACHE_PORT>
                                </env>
                                <wait>
                                    <log>WebDAV Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${webdav.apache.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- Run the RabbitMQ image. -->
                        <image>
                            <alias>rabbitmq</alias>
                            <name>rabbitmq:3-management</name>
                            <run>
                                <ports>
                                    <port>${rabbitmq.ctrl.port}:15672</port>
                                    <port>${rabbitmq.node.port}:5672</port>
                                </ports>
                                <wait>
                                    <log>Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${rabbitmq.ctrl.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>

                        <!-- Configuration for the worker-tikaextract image -->
                        <image>
                            <alias>worker-tikaextract</alias>
                            <name>${worker-tikaextract.container.name}</name>
                            <build>
                                <maintainer>anthony.mcgreevy@microfocus.com</maintainer>
                                <from>cafapi/opensuse-jre8:1</from>
                                <labels>
                                    <caf.worker-document-framework.version>${caf.worker-document-framework.version}</caf.worker-document-framework.version>
                                </labels>
                                <!-- The entry point will be the worker.sh executable. -->
                                <cmd>
                                    <exec>
                                        <args>/maven/worker.sh</args>
                                    </exec>
                                </cmd>
                                <healthCheck>
                                    <cmd>curl -f http://localhost:8081/healthcheck || exit 1</cmd>
                                </healthCheck>
                                <assembly>
                                    <mode>tar</mode>
                                    <inline>
                                        <!-- Including the executable worker.sh and worker.yaml files in the docker tar -->
                                        <fileSets>
                                            <fileSet>
                                                <lineEnding>unix</lineEnding>
                                                <includes>
                                                    <include>worker.sh</include>
                                                </includes>
                                                <fileMode>0755</fileMode>
                                            </fileSet>
                                            <fileSet>
                                                <lineEnding>unix</lineEnding>
                                                <includes>
                                                    <include>worker.yaml</include>
                                                </includes>
                                            </fileSet>
                                            <fileSet>
                                                <directory>${project.build.directory}/config-files</directory>
                                                <outputDirectory>config</outputDirectory>
                                            </fileSet>
                                        </fileSets>
                                        <!-- Including the dependencies into the docker tar -->
                                        <dependencySets>
                                            <dependencySet>
                                                <useProjectArtifact>false</useProjectArtifact>
                                                <scope>runtime</scope>
                                            </dependencySet>
                                        </dependencySets>
                                    </inline>
                                </assembly>
                            </build>
                            <run>
                                <ports>
                                    <port>${worker.adminport}:8081</port>
                                </ports>
                                <env>
                                    <CAF_WORKER_DATASTORE_PATH>/srv/common/webdav</CAF_WORKER_DATASTORE_PATH>
                                    <CAF_RABBITMQ_PREFETCH_BUFFER>1000</CAF_RABBITMQ_PREFETCH_BUFFER>
                                    <CAF_WORKER_RETRY_LIMIT>2</CAF_WORKER_RETRY_LIMIT>
                                    <CAF_WORKER_MAX_BATCH_SIZE>2</CAF_WORKER_MAX_BATCH_SIZE>
                                    <CAF_WORKER_MAX_BATCH_TIME>5000</CAF_WORKER_MAX_BATCH_TIME>
                                </env>
                                <volumes>
                                    <from>
                                        <image>webdav</image>
                                    </from>
                                </volumes>
                                <links>
                                    <link>rabbitmq</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${worker.adminport}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>

                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- Use this profile if your virtual machine setup must use fixed ports. -->
    <profiles>
        <profile>
            <id>use-default-fixed-ports</id>
            <properties>
                <rabbitmq.ctrl.port>15672</rabbitmq.ctrl.port>
                <rabbitmq.node.port>5672</rabbitmq.node.port>
                <worker.adminport>8081</worker.adminport>
            </properties>
        </profile>
        <profile>
            <id>windows</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <caf.integrationtests.fs.path>\\${docker.host.address}@${webdav.apache.port}\webdav</caf.integrationtests.fs.path>
            </properties>
        </profile>

        <profile>
            <id>linux</id>
            <activation>
                <os>
                    <family>unix</family>
                    <name>linux</name>
                </os>
            </activation>
            <properties>
                <caf.integrationtests.fs.path>/mnt/vm-${webdav.apache.port}-webdav</caf.integrationtests.fs.path>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.5.0</version>
                        <executions>
                            <execution>
                                <id>create-filestore-dir</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>/bin/bash</executable>
                                    <commandlineArgs>-c 'sudo mkdir -m 755 ${caf.integrationtests.fs.path} &amp;&amp; echo | sudo http_proxy= https_proxy= mount -t davfs http://${docker.host.address}:${webdav.apache.port}/webdav ${caf.integrationtests.fs.path} -o rw,user,noauto,uid=$USER,file_mode=600,dir_mode=700,username=" "'</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>remove-filestore-dir</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>/bin/bash</executable>
                                    <commandlineArgs>-c 'sudo umount ${caf.integrationtests.fs.path} ; sudo rm -rf ${caf.integrationtests.fs.path}'</commandlineArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
